#version: "4.2"
#
#services:
#  postgres:
#    image: postgres:13.3
#    environment:
#      POSTGRES_DB: "habrdb"
#      POSTGRES_USER: "habrpguser"
#      POSTGRES_PASSWORD: "pgpwd4habr"
#  volumes:.

#version: "3.7"
#
#services:
#  postgres:
#    image: postgres:13.3
##    command: sh -c "yarn install && yarn run dev"
#    ports:
#      - 3000:3000
#    working_dir: /app
#    volumes:
#      -  ./:/app
#    environment:
#      POSTGRES_HOST: psql
#      POSTGRES_DB: "db"
#      POSTGRES_USER: "WebDad"
#      POSTGRES_PASSWORD: "123"
#volumes:
#  todo-qsql-data:


#version: "3.7"
#services:
#   ----------5-------------
#    postgres:
#      image: postgres:12.4-alpine
#      restart: always
#      volumes:
#        - ./data/postgres:/var/lib/postgresql/data
#      environment:
#        POSTGRES_USER: "WebDad"
#        POSTGRES_PASSWORD: "123"
#      ports:
#       - 5432:5432
# -----7------------
# mongo:
#  image: mongo
#  restart: always
#  environment:
#    MONGO_INITDB_ROOT_USERNAME: root
#    MONGO_INITDB_ROOT_PASSWORD: example
#
# mongo-express:
#    image: mongo-express
#    restart: always
#    ports:
#      - 8081:8081
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: example
#      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

#  s3manager:
#    build: .
#    ports:
#      - 8080:8080
#    environment:
#      - ENDPOINT=s3:9000
#      - ACCESS_KEY_ID=s3manager
#      - SECRET_ACCESS_KEY=s3manager
#      - USE_SSL=false
#    depends_on:
#      - s3
#  s3:
#      image: minio/minio
#      command: server /data
#      ports:
#        - 9000:9000
#        - 9001:9001
#      environment:
#        - MINIO_ACCESS_KEY=s3manager
#        - MINIO_SECRET_KEY=s3manager
#        - MINIO_ADDRESS=0.0.0.0:9000
#        - MINIO_CONSOLE_ADDRESS=0.0.0.0:9001

#  redis:
#    image: redis
#    restart: always
#    ports:
#      - 6379:6379
#    volumes:
#      - ./:/data
#    environment:
#     - REDIS_PASSWORD=123

#   ------------- 6------------
#version: '3.1'
#services:
#  db:
#    image: postgres:13.3
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_USER: user
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: db
#  admin:
#    image: adminer
#    restart: always
#    depends_on:
#      - db
#    ports:
#      - 8080:8080

#---------8-----------

 version: '3.7'

 services:

  # The 'setup' service runs a one-off script which initializes the
  # 'logstash_internal' and 'kibana_system' users inside Elasticsearch with the
  # values of the passwords defined in the '.env' file.
  #
  # This task is only performed during the *initial* startup of the stack. On all
  # subsequent runs, the service simply returns immediately, without performing
  # any modification to existing users.
  setup:
    image: docker-elk-setup

#    volumes:
#      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  elasticsearch:
    image: elasticsearch:8.5.0
    container_name: elasticsearch
#    volumes:
#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
#      - elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    image: logstash:8.5.0
#    volumes:
#      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
#      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:8.5.0

#    volumes:
#      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z

    ports:
      - "5601:5601"
    environment:
      ELASTICSEACH_HOSTS: http://elasticsearch:9200

      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      # Fleet plugin
      KIBANA_FLEET_SETUP: '1'
    networks:
      - elk
    depends_on:
      - elasticsearch

 networks:
  elk:
    driver: bridge

 volumes:
  setup:
  elasticsearch:

#-----------------9-----------
#version: '3'
#services:
#  nginx:
#    image: "nginx:latest"
#    ports:
#      - "127.0.0.1:8080:80"
#    volumes:
#      - "./Static-site:/usr/share/nginx/html:ro"